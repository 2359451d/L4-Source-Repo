#!/bin/bash

# ===============Compile Time Errors Comparison==================
# compare the compiler output with expected error files (generated from "gold standard compiler")

ptj="java -jar ./target/pascal-to-jvm-compiler-jar-with-dependencies.jar"
p5="compile"
gpc="gpc"
fpc="fpc"
# fpc="fpc -Miso"

compiler=""
command=""
filename=""

if [[ $1 = "ptj" ]]; then
    compiler=$ptj
    command=$2
    shift 2
    filename=$@
    if [[ -z $filename ]];then
        echo "Invalid arugments. Usage: ptj <command> <file_path>"
        exit 1
    fi
elif [[ $1 = "gpc" ]]; then
    compiler=$gpc
    shift
    filename=$@
elif [[ $1 = "fpc" ]]; then
    compiler=$fpc
    shift
    filename=$@
elif [[ $1 = "p5" ]]; then
    compiler=$p5
    shift
    filename=`echo $@ | grep -Eo ".*[[:digit:]]+"`
else
    echo "Please specify invalid compiler: fpc, gpc, p5, ptj"
    exit 1
fi

echo "compiler: $compiler"
echo "command: $command"
echo "filename: $filename"

# if [ $1 = "ptj" ]; then
    # eval $compiler $command $filename
# else
    # eval $compiler $filename
# fi

eval $compiler $command $filename &> $filename.lst

fileEndsWithPas=`echo $filename | grep -Eo ".pas"`
if [[ -z $fileEndsWithPas ]];then
    # manual append file extension
    cat $filename.pas.err | sed -r "s/.*\(([[:digit:]]+),[[:digit:]]+.*/\1/g" > $filename.err_
    echo "expected error ouput trace:" && cat $filename.err_
else
    cat $filename.err | sed -r "s/.*\(([[:digit:]]+),[[:digit:]]+.*/\1/g" > $filename.err_
    echo "expected error ouput trace:" && cat $filename.err_
fi

if [[ $compiler = $p5 ]]; then
    # make the p5 compile output into other file
    cp $filename.err $filename.pas.lst

    (cat $filename.err | awk 'NF' | sed -r "s/[[:space:]]*//g" | grep -Eo "([[:digit:]]+\*+.*)" | sed -r "s/([[:digit:]]+)\*+.*/\1/g") > $filename.pas.lst_

    # clean up original auxilary files generated by p5
    rm -f $filename.err
    rm -f $filename.lst

elif [[ $compiler = $ptj ]]; then

    (cat $filename.lst | grep "\[ERROR\]" | cut -d ' ' -f 2 | sed -r "s|([[:digit:]]*):.*|\1|g") > $filename.lst_

elif [[ $compiler = $gpc ]]; then

    (cat $filename.lst | grep -Eo "[[:digit:]]+:\serror" | sed -r "s/([[:digit:]]+):.*/\1/g") > $filename.lst_

fi

if [[ -z $fileEndsWithPas ]];then
    # manual append file extension
    echo "actual actual error ouput trace:" && cat $filename.pas.lst_
    diff $filename.err_ $filename.pas.lst_

    # clean up
    rm $filename.pas.lst_
    rm $filename.err_
else
    echo "actual actual error ouput trace:" && cat $filename.lst_
    diff $filename.err_ $filename.lst_
    # clean up
    rm $filename.lst_
    rm $filename.err_
fi

startTime=`date +%Y%m%d-%H:%M:%S`
startTime_s=`date +%s`

# compile each Pascal source file
for i in $filename
do
    echo $i
done

endTime=`date +%Y%m%d-%H:%M:%S`
endTime_s=`date +%s`

sumTime=$((endTime_s-startTime_s))

# echo "$startTime ---> $endTime" "Total:$sumTime seconds"